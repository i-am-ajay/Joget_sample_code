package org.joget.geowatch.ghtrack.service.impl;import com.google.gson.Gson;import org.joget.geowatch.db.dto.GhtVehicle;import org.joget.geowatch.db.dto.inner.GhtVehicleInnerEntity;import org.joget.geowatch.db.dto.Trip;import org.joget.geowatch.ght.net.dto.in.resp.log.Id;import org.joget.geowatch.ght.net.dto.tour.Tour;import org.joget.geowatch.ght.net.dto.in.resp.error.TourError;import org.joget.geowatch.ghtrack.GhTrackUtil;import org.joget.geowatch.ghtrack.service.GhTourService;import org.joget.geowatch.util.UrlUtil;import java.util.List;import static org.joget.geowatch.app.AppProperties.*;import static org.joget.geowatch.util.UrlUtil.Method.POST;import static org.joget.geowatch.util.UrlUtil.getObj;/** * Created by k.lebedyantsev * Date: 1/8/2018 * Time: 1:15 PM */public class GhTourServiceImpl extends AbstractGhTrackService implements GhTourService {    private static final String CREATE_OR_UPDATE_TOUR_URL = GHT_BASE_URL + "/api/v1/tour/";    private static final String STATUS = "/tour/status/{tour_id}";    private static final String LIST_VEHICLE_URL = "/api/v1/tour/status/vehicles";//    @Override//    public TourError createOrUpdateTour(Trip trip, Vehicle vehicle, List<RouteMapWayPoint> wayPointList) throws Exception {//        Tour tour = Tour.create(new Tour(), trip, vehicle, wayPointList);////        Object response = doExternalCall(CREATE_OR_UPDATE_TOUR_URL, TOUR_CALL,//                "POST", tour, TourError.class, TourError.class);////        TourError tourError = null;//        if (response instanceof TourError) {//            tourError = (TourError) response;//        }////        return tourError;//    }//    @Override//    public TourError createOrUpdateTour(TripOutResp tripJson) throws Exception {//        Tour tour = GhTrackUtil.remapTripJsonToGhTour(tripJson);//        Object response = doExternalCall(CREATE_OR_UPDATE_TOUR_URL, TOUR_CALL,//                "POST", tour, TourError.class, TourError.class);//        TourError tourError = null;//        if (response instanceof TourError) {//            tourError = (TourError) response;//        }////        return tourError;//    }    @Override    public UrlUtil.RespResult<String, TourError> createOrUpdateTour(Trip trip, GhtVehicleInnerEntity ghtVehicle) throws Exception {        Tour tour = Tour.update(new Tour(), trip, ghtVehicle, GHT_CUSTOMER_NAME, ghtVehicle.getTransportCompany());        UrlUtil.RespResult<String, TourError> respRes =                getObj(String.class, TourError.class,                        POST, CREATE_OR_UPDATE_TOUR_URL, null, tour,                        new UrlUtil.Header[]{                                new UrlUtil.Header("Content-Type", "application/json"),                                new UrlUtil.Header("X-Api-Key", GHT_TOUR_API_KEY)}                );        return respRes;    }    @Override    public List<GhtVehicle> listVehicle() throws Exception {        Object response = doExternalCall(LIST_VEHICLE_URL, TOUR_CALL,                "GET", null, Id[].class, TourError.class);        Id[] ghtVehicleSamples = null;        if (response == null) {            throw new Exception("Missing API key");        } else {            if (response instanceof Id[]) {                ghtVehicleSamples = (Id[]) response;            } else if (response instanceof TourError) {                throw new Exception(new Gson().toJson(response));            }        }        return GhTrackUtil.remapListGhVehicleToListVehicleDto(ghtVehicleSamples);    }}